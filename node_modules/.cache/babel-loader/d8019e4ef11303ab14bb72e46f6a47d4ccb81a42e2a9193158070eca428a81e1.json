{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GRIGS\\\\Desktop\\\\TaskTrail\\\\TaskTrail---REACT\\\\src\\\\Components\\\\TaskList.js\",\n  _s = $RefreshSig$();\n/* TaskList.js with Improved Filtering and Rerendering */\nimport '../App.scss';\nimport { useContext, useEffect, useState } from 'react';\nimport TaskCard from './TaskCard.js';\nimport { TaskContext } from '../Context/TaskContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskList({\n  status,\n  filteredTasks,\n  setFilteredTasks\n}) {\n  _s();\n  const {\n    tasks,\n    updateTaskStatus\n  } = useContext(TaskContext);\n  const [localTasks, setLocalTasks] = useState([]);\n  useEffect(() => {\n    // Filter tasks by status and update local state\n    const updatedTasks = tasks.filter(task => task.status === status);\n    setLocalTasks(updatedTasks);\n\n    // If a parent component wants to manage filtered tasks, update it as well\n    if (setFilteredTasks) {\n      setFilteredTasks(updatedTasks);\n    }\n  }, [tasks, status, setFilteredTasks]);\n  const handleDragOver = event => {\n    event.preventDefault();\n    console.log(\"Drag over event detected on list with status:\", status);\n  };\n  const handleDrop = event => {\n    event.preventDefault();\n    console.log(\"Drop event detected on list with status:\", status);\n    const taskId = event.dataTransfer.getData('taskId');\n    const draggedTask = tasks.find(task => task.taskId === taskId);\n    if (draggedTask) {\n      console.log(`Initial Status of Task ${taskId}:`, draggedTask.status);\n\n      // Update the task status only if it's dropped in a different list\n      if (draggedTask.status !== status) {\n        updateTaskStatus(taskId, status);\n        console.log(`Updated Status of Task ${taskId}:`, status);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task__list\",\n    onDragOver: handleDragOver,\n    onDrop: handleDrop,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"list__title\",\n      children: status === 'open' ? 'To Do' : status === 'in-progress' ? 'In Progress' : 'Done'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list__content\",\n      children: localTasks.map(task => /*#__PURE__*/_jsxDEV(TaskCard, {\n        ...task\n      }, task.taskId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n_s(TaskList, \"RlzmHMNp7Yr/ku6bmmSxDMHkVC4=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["useContext","useEffect","useState","TaskCard","TaskContext","jsxDEV","_jsxDEV","TaskList","status","filteredTasks","setFilteredTasks","_s","tasks","updateTaskStatus","localTasks","setLocalTasks","updatedTasks","filter","task","handleDragOver","event","preventDefault","console","log","handleDrop","taskId","dataTransfer","getData","draggedTask","find","className","onDragOver","onDrop","children","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","$RefreshReg$"],"sources":["C:/Users/GRIGS/Desktop/TaskTrail/TaskTrail---REACT/src/Components/TaskList.js"],"sourcesContent":["/* TaskList.js with Improved Filtering and Rerendering */\nimport '../App.scss';\nimport { useContext, useEffect, useState } from 'react';\nimport TaskCard from './TaskCard.js';\nimport { TaskContext } from '../Context/TaskContext';\n\nfunction TaskList({ status, filteredTasks, setFilteredTasks }) {\n    const { tasks, updateTaskStatus } = useContext(TaskContext);\n    const [localTasks, setLocalTasks] = useState([]);\n\n    useEffect(() => {\n        // Filter tasks by status and update local state\n        const updatedTasks = tasks.filter((task) => task.status === status);\n        setLocalTasks(updatedTasks);\n\n        // If a parent component wants to manage filtered tasks, update it as well\n        if (setFilteredTasks) {\n            setFilteredTasks(updatedTasks);\n        }\n    }, [tasks, status, setFilteredTasks]);\n\n    const handleDragOver = (event) => {\n        event.preventDefault();\n        console.log(\"Drag over event detected on list with status:\", status);\n    };\n\n    const handleDrop = (event) => {\n        event.preventDefault();\n        console.log(\"Drop event detected on list with status:\", status);\n        const taskId = event.dataTransfer.getData('taskId');\n        const draggedTask = tasks.find((task) => task.taskId === taskId);\n\n        if (draggedTask) {\n            console.log(`Initial Status of Task ${taskId}:`, draggedTask.status);\n\n            // Update the task status only if it's dropped in a different list\n            if (draggedTask.status !== status) {\n                updateTaskStatus(taskId, status);\n                console.log(`Updated Status of Task ${taskId}:`, status);\n            }\n        }\n    };\n\n    return (\n        <div\n            className=\"task__list\"\n            onDragOver={handleDragOver}\n            onDrop={handleDrop}\n        >\n            <h2 className=\"list__title\">\n                {status === 'open' ? 'To Do' : status === 'in-progress' ? 'In Progress' : 'Done'}\n            </h2>\n            <div className=\"list__content\">\n                {localTasks.map((task) => (\n                    <TaskCard\n                        key={task.taskId} // Unique key for React rendering\n                        {...task} // Spread all task properties as props\n                    />\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default TaskList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}