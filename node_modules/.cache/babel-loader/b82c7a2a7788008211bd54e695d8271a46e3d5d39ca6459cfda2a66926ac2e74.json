{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GRIGS\\\\Desktop\\\\TaskTrail\\\\TaskTrail---REACT\\\\src\\\\Components\\\\TaskList.js\",\n  _s = $RefreshSig$();\nimport '../App.scss';\nimport { useContext } from 'react';\nimport TaskCard from './TaskCard.js';\nimport { TaskContext } from '../Context/TaskContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskList({\n  status\n}) {\n  _s();\n  const {\n    tasks,\n    updateTaskStatus\n  } = useContext(TaskContext);\n\n  // Filter tasks based on their current status\n  const displayedTasks = tasks.filter(task => task.status === status);\n\n  // Drag and Drop Handlers\n  const handleDragStart = (event, taskId) => {\n    console.log(\"Dragging task:\", taskId);\n    event.dataTransfer.setData('taskId', taskId);\n  };\n  const handleDragOver = event => {\n    event.preventDefault();\n  };\n  const handleDrop = event => {\n    event.preventDefault();\n    const taskId = event.dataTransfer.getData('taskId');\n    console.log(\"Dropped task:\", taskId, \"to status:\", status);\n    updateTaskStatus(taskId, status);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task__list\",\n    onDragOver: handleDragOver,\n    onDrop: handleDrop,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"list__title\",\n      children: status === 'open' ? 'To Do' : status === 'in-progress' ? 'In Progress' : 'Done'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list__content\",\n      children: displayedTasks.map(task => /*#__PURE__*/_jsxDEV(TaskCard, {\n        ...task,\n        onDragStart: event => handleDragStart(event, task.taskId)\n      }, task.taskId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n}\n_s(TaskList, \"0mjgAtkkfUekea+2qp8thE9nVoc=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["useContext","TaskCard","TaskContext","jsxDEV","_jsxDEV","TaskList","status","_s","tasks","updateTaskStatus","displayedTasks","filter","task","handleDragStart","event","taskId","console","log","dataTransfer","setData","handleDragOver","preventDefault","handleDrop","getData","className","onDragOver","onDrop","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onDragStart","_c","$RefreshReg$"],"sources":["C:/Users/GRIGS/Desktop/TaskTrail/TaskTrail---REACT/src/Components/TaskList.js"],"sourcesContent":["\nimport '../App.scss';\nimport { useContext } from 'react';\nimport TaskCard from './TaskCard.js';\nimport { TaskContext } from '../Context/TaskContext';\n\nfunction TaskList({ status }) {\n    const { tasks, updateTaskStatus } = useContext(TaskContext);\n\n    // Filter tasks based on their current status\n    const displayedTasks = tasks.filter((task) => task.status === status);\n\n    // Drag and Drop Handlers\n    const handleDragStart = (event, taskId) => {\n        console.log(\"Dragging task:\", taskId);\n        event.dataTransfer.setData('taskId', taskId);\n    };\n\n    const handleDragOver = (event) => {\n        event.preventDefault();\n    };\n\n    const handleDrop = (event) => {\n        event.preventDefault();\n        const taskId = event.dataTransfer.getData('taskId');\n        console.log(\"Dropped task:\", taskId, \"to status:\", status);\n        updateTaskStatus(taskId, status);\n    };\n\n    return (\n        <div\n            className=\"task__list\"\n            onDragOver={handleDragOver}\n            onDrop={handleDrop}\n        >\n            <h2 className=\"list__title\">\n                {status === 'open' ? 'To Do' : status === 'in-progress' ? 'In Progress' : 'Done'}\n            </h2>\n            <div className=\"list__content\">\n                {displayedTasks.map((task) => (\n                    <TaskCard\n                        key={task.taskId}\n                        {...task}\n                        onDragStart={(event) => handleDragStart(event, task.taskId)}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default TaskList;\n"],"mappings":";;AACA,OAAO,aAAa;AACpB,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,QAAQ,MAAM,eAAe;AACpC,SAASC,WAAW,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,SAASC,QAAQA,CAAC;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EAC1B,MAAM;IAAEC,KAAK;IAAEC;EAAiB,CAAC,GAAGT,UAAU,CAACE,WAAW,CAAC;;EAE3D;EACA,MAAMQ,cAAc,GAAGF,KAAK,CAACG,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACN,MAAM,KAAKA,MAAM,CAAC;;EAErE;EACA,MAAMO,eAAe,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;IACvCC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,MAAM,CAAC;IACrCD,KAAK,CAACI,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEJ,MAAM,CAAC;EAChD,CAAC;EAED,MAAMK,cAAc,GAAIN,KAAK,IAAK;IAC9BA,KAAK,CAACO,cAAc,CAAC,CAAC;EAC1B,CAAC;EAED,MAAMC,UAAU,GAAIR,KAAK,IAAK;IAC1BA,KAAK,CAACO,cAAc,CAAC,CAAC;IACtB,MAAMN,MAAM,GAAGD,KAAK,CAACI,YAAY,CAACK,OAAO,CAAC,QAAQ,CAAC;IACnDP,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,MAAM,EAAE,YAAY,EAAET,MAAM,CAAC;IAC1DG,gBAAgB,CAACM,MAAM,EAAET,MAAM,CAAC;EACpC,CAAC;EAED,oBACIF,OAAA;IACIoB,SAAS,EAAC,YAAY;IACtBC,UAAU,EAAEL,cAAe;IAC3BM,MAAM,EAAEJ,UAAW;IAAAK,QAAA,gBAEnBvB,OAAA;MAAIoB,SAAS,EAAC,aAAa;MAAAG,QAAA,EACtBrB,MAAM,KAAK,MAAM,GAAG,OAAO,GAAGA,MAAM,KAAK,aAAa,GAAG,aAAa,GAAG;IAAM;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChF,CAAC,eACL3B,OAAA;MAAKoB,SAAS,EAAC,eAAe;MAAAG,QAAA,EACzBjB,cAAc,CAACsB,GAAG,CAAEpB,IAAI,iBACrBR,OAAA,CAACH,QAAQ;QAAA,GAEDW,IAAI;QACRqB,WAAW,EAAGnB,KAAK,IAAKD,eAAe,CAACC,KAAK,EAAEF,IAAI,CAACG,MAAM;MAAE,GAFvDH,IAAI,CAACG,MAAM;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGnB,CACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACxB,EAAA,CA3CQF,QAAQ;AAAA6B,EAAA,GAAR7B,QAAQ;AA6CjB,eAAeA,QAAQ;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}