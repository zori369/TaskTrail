{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GRIGS\\\\Desktop\\\\TaskTrail\\\\TaskTrail---REACT\\\\src\\\\Components\\\\TaskList.tsx\",\n  _s = $RefreshSig$();\nimport '../App.scss';\nimport { useContext, useEffect } from 'react';\nimport TaskCard from './TaskCard';\nimport { TaskContext } from '../Context/TaskContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskList = ({\n  status,\n  filteredTasks,\n  setFilteredTasks\n}) => {\n  _s();\n  const {\n    tasks,\n    updateTaskStatus\n  } = useContext(TaskContext);\n\n  // Filter tasks based on the global `tasks` state and the provided `status`\n  const filteredTasksList = filteredTasks || tasks.filter(task => task.status === status);\n  useEffect(() => {\n    // If a parent component wants to manage filtered tasks, update it as well\n    if (setFilteredTasks) {\n      setFilteredTasks(tasks.filter(task => task.status === status));\n    }\n  }, [tasks, status, setFilteredTasks]);\n  const handleDragOver = event => {\n    event.preventDefault();\n  };\n  const handleDrop = event => {\n    event.preventDefault();\n    const taskId = event.dataTransfer.getData('taskId');\n    if (!taskId) {\n      console.error(\"No taskId found in the drop event\");\n      return;\n    }\n    const draggedTask = tasks.find(task => String(task.taskId) === taskId);\n    if (!draggedTask) {\n      console.error(`No task found with taskId: ${taskId}`);\n      return;\n    }\n    console.log(`Task ${taskId} - Status before drag: ${draggedTask.status}`);\n\n    // Update the task status only if it's dropped in a different list\n    if (draggedTask.status !== status) {\n      updateTaskStatus(taskId, status);\n      console.log(`Task ${taskId} - Status after drop: ${status}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task__list\",\n    onDragOver: handleDragOver,\n    onDrop: handleDrop,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"list__title\",\n      children: status === 'open' ? 'To Do' : status === 'in-progress' ? 'In Progress' : 'Done'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list__content\",\n      children: filteredTasksList.map(task => /*#__PURE__*/_jsxDEV(TaskCard, {\n        ...task,\n        // Spread all task properties as props\n        draggable: \"true\",\n        onDragStart: event => {\n          event.dataTransfer.setData('taskId', String(task.taskId));\n        }\n      }, task.taskId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskList, \"a8lPIB0DU7Ht9kFXfmNDnwTDBIA=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["useContext","useEffect","TaskCard","TaskContext","jsxDEV","_jsxDEV","TaskList","status","filteredTasks","setFilteredTasks","_s","tasks","updateTaskStatus","filteredTasksList","filter","task","handleDragOver","event","preventDefault","handleDrop","taskId","dataTransfer","getData","console","error","draggedTask","find","String","log","className","onDragOver","onDrop","children","fileName","_jsxFileName","lineNumber","columnNumber","map","draggable","onDragStart","setData","_c","$RefreshReg$"],"sources":["C:/Users/GRIGS/Desktop/TaskTrail/TaskTrail---REACT/src/Components/TaskList.tsx"],"sourcesContent":["import '../App.scss';\nimport { useContext, useEffect } from 'react';\nimport TaskCard from './TaskCard';\nimport { TaskContext, Task } from '../Context/TaskContext';\n\ninterface TaskListProps {\n    status: 'open' | 'in-progress' | 'done'; // Allowed statuses for tasks\n    filteredTasks?: Task[]; // Optional filtered tasks provided by parent component\n    setFilteredTasks?: (tasks: Task[]) => void; // Optional callback to update filtered tasks in the parent component\n}\n\nconst TaskList: React.FC<TaskListProps> = ({ status, filteredTasks, setFilteredTasks }) => {\n    const { tasks, updateTaskStatus } = useContext(TaskContext);\n\n    // Filter tasks based on the global `tasks` state and the provided `status`\n    const filteredTasksList: Task[] = filteredTasks || tasks.filter((task) => task.status === status);\n\n    useEffect(() => {\n        // If a parent component wants to manage filtered tasks, update it as well\n        if (setFilteredTasks) {\n            setFilteredTasks(tasks.filter((task) => task.status === status));\n        }\n    }, [tasks, status, setFilteredTasks]);\n\n    const handleDragOver = (event: React.DragEvent<HTMLDivElement>) => {\n        event.preventDefault();\n    };\n\n    const handleDrop = (event: React.DragEvent<HTMLDivElement>) => {\n        event.preventDefault();\n        const taskId = event.dataTransfer.getData('taskId');\n        if (!taskId) {\n            console.error(\"No taskId found in the drop event\");\n            return;\n        }\n\n        const draggedTask = tasks.find((task) => String(task.taskId) === taskId);\n        if (!draggedTask) {\n            console.error(`No task found with taskId: ${taskId}`);\n            return;\n        }\n\n        console.log(`Task ${taskId} - Status before drag: ${draggedTask.status}`);\n\n        // Update the task status only if it's dropped in a different list\n        if (draggedTask.status !== status) {\n            updateTaskStatus(taskId, status);\n            console.log(`Task ${taskId} - Status after drop: ${status}`);\n        }\n    };\n\n    return (\n        <div\n            className=\"task__list\"\n            onDragOver={handleDragOver}\n            onDrop={handleDrop}\n        >\n            <h2 className=\"list__title\">\n                {status === 'open' ? 'To Do' : status === 'in-progress' ? 'In Progress' : 'Done'}\n            </h2>\n            <div className=\"list__content\">\n                {filteredTasksList.map((task) => (\n                    <TaskCard\n                        key={task.taskId} // Unique key for React rendering\n                        {...task} // Spread all task properties as props\n                        draggable=\"true\"\n                        onDragStart={(event) => {\n                            event.dataTransfer.setData('taskId', String(task.taskId));\n                        }}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default TaskList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}