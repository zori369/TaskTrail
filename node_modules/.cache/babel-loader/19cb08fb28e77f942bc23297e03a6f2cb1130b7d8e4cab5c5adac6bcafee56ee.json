{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GRIGS\\\\Desktop\\\\TaskTrail\\\\TaskTrail---REACT\\\\src\\\\Components\\\\TaskList.js\",\n  _s = $RefreshSig$();\n// Fixed TaskList.js to dynamically recompute filteredTasks after global state changes\nimport { useContext, useEffect } from 'react';\nimport '../App.scss';\nimport TaskCard from './TaskCard.js';\nimport { TaskContext } from '../Context/TaskContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskList({\n  status,\n  filteredTasks,\n  setFilteredTasks\n}) {\n  _s();\n  const {\n    tasks\n  } = useContext(TaskContext);\n\n  // Recompute filteredTasks whenever tasks or status changes\n  useEffect(() => {\n    if (setFilteredTasks) {\n      if (filteredTasks) {\n        const updatedFilteredTasks = tasks.filter(task => filteredTasks.some(ft => ft.taskId === task.taskId));\n        setFilteredTasks(updatedFilteredTasks);\n      }\n    }\n  }, [tasks, filteredTasks, setFilteredTasks]);\n  const displayedTasks = filteredTasks && filteredTasks.length > 0 ? filteredTasks : tasks.filter(task => task.status === status);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task__list\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"list__title\",\n      children: status === 'open' ? 'To Do' : status === 'in-progress' ? 'In Progress' : 'Done'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list__content\",\n      children: displayedTasks.map(task => /*#__PURE__*/_jsxDEV(TaskCard, {\n        ...task\n      }, task.taskId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n_s(TaskList, \"qBJehXhW+2+1Jo0m70A4otHoK68=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["useContext","useEffect","TaskCard","TaskContext","jsxDEV","_jsxDEV","TaskList","status","filteredTasks","setFilteredTasks","_s","tasks","updatedFilteredTasks","filter","task","some","ft","taskId","displayedTasks","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","$RefreshReg$"],"sources":["C:/Users/GRIGS/Desktop/TaskTrail/TaskTrail---REACT/src/Components/TaskList.js"],"sourcesContent":["// Fixed TaskList.js to dynamically recompute filteredTasks after global state changes\r\nimport { useContext, useEffect } from 'react';\r\nimport '../App.scss';\r\nimport TaskCard from './TaskCard.js';\r\nimport { TaskContext } from '../Context/TaskContext';\r\n\r\nfunction TaskList({ status, filteredTasks, setFilteredTasks }) {\r\n    const { tasks } = useContext(TaskContext);\r\n\r\n    // Recompute filteredTasks whenever tasks or status changes\r\n    useEffect(() => {\r\n        if (setFilteredTasks) {\r\n            if (filteredTasks) {\r\n                const updatedFilteredTasks = tasks.filter((task) =>\r\n                    filteredTasks.some((ft) => ft.taskId === task.taskId)\r\n                );\r\n                setFilteredTasks(updatedFilteredTasks);\r\n            }\r\n        }\r\n    }, [tasks, filteredTasks, setFilteredTasks]);\r\n\r\n    const displayedTasks = filteredTasks && filteredTasks.length > 0\r\n        ? filteredTasks\r\n        : tasks.filter((task) => task.status === status);\r\n\r\n    return (\r\n        <div className=\"task__list\">\r\n            <h2 className=\"list__title\">\r\n                {status === 'open' ? 'To Do' : status === 'in-progress' ? 'In Progress' : 'Done'}\r\n            </h2>\r\n            <div className=\"list__content\">\r\n                {displayedTasks.map((task) => (\r\n                    <TaskCard key={task.taskId} {...task} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskList;\r\n"],"mappings":";;AAAA;AACA,SAASA,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7C,OAAO,aAAa;AACpB,OAAOC,QAAQ,MAAM,eAAe;AACpC,SAASC,WAAW,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,SAASC,QAAQA,CAAC;EAAEC,MAAM;EAAEC,aAAa;EAAEC;AAAiB,CAAC,EAAE;EAAAC,EAAA;EAC3D,MAAM;IAAEC;EAAM,CAAC,GAAGX,UAAU,CAACG,WAAW,CAAC;;EAEzC;EACAF,SAAS,CAAC,MAAM;IACZ,IAAIQ,gBAAgB,EAAE;MAClB,IAAID,aAAa,EAAE;QACf,MAAMI,oBAAoB,GAAGD,KAAK,CAACE,MAAM,CAAEC,IAAI,IAC3CN,aAAa,CAACO,IAAI,CAAEC,EAAE,IAAKA,EAAE,CAACC,MAAM,KAAKH,IAAI,CAACG,MAAM,CACxD,CAAC;QACDR,gBAAgB,CAACG,oBAAoB,CAAC;MAC1C;IACJ;EACJ,CAAC,EAAE,CAACD,KAAK,EAAEH,aAAa,EAAEC,gBAAgB,CAAC,CAAC;EAE5C,MAAMS,cAAc,GAAGV,aAAa,IAAIA,aAAa,CAACW,MAAM,GAAG,CAAC,GAC1DX,aAAa,GACbG,KAAK,CAACE,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACP,MAAM,KAAKA,MAAM,CAAC;EAEpD,oBACIF,OAAA;IAAKe,SAAS,EAAC,YAAY;IAAAC,QAAA,gBACvBhB,OAAA;MAAIe,SAAS,EAAC,aAAa;MAAAC,QAAA,EACtBd,MAAM,KAAK,MAAM,GAAG,OAAO,GAAGA,MAAM,KAAK,aAAa,GAAG,aAAa,GAAG;IAAM;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChF,CAAC,eACLpB,OAAA;MAAKe,SAAS,EAAC,eAAe;MAAAC,QAAA,EACzBH,cAAc,CAACQ,GAAG,CAAEZ,IAAI,iBACrBT,OAAA,CAACH,QAAQ;QAAA,GAAuBY;MAAI,GAArBA,IAAI,CAACG,MAAM;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAC1C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACf,EAAA,CA/BQJ,QAAQ;AAAAqB,EAAA,GAARrB,QAAQ;AAiCjB,eAAeA,QAAQ;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}