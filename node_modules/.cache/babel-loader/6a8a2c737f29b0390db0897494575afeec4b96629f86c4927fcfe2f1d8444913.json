{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\GRIGS\\\\Desktop\\\\TaskTrail\\\\TaskTrail---REACT\\\\src\\\\Components\\\\TaskList.js\",\n  _s = $RefreshSig$();\nimport '../App.scss';\nimport { useContext, useEffect } from 'react';\nimport TaskCard from './TaskCard.js';\nimport { TaskContext } from '../Context/TaskContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskList({\n  status,\n  filteredTasks,\n  setFilteredTasks\n}) {\n  _s();\n  const {\n    tasks,\n    updateTaskStatus\n  } = useContext(TaskContext);\n  useEffect(() => {\n    const updatedTasks = tasks.filter(task => task.status === status);\n    if (setFilteredTasks) {\n      setFilteredTasks(updatedTasks);\n    }\n  }, [tasks, status, setFilteredTasks]);\n  const displayedTasks = filteredTasks || tasks.filter(task => task.status === status);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task__list\",\n    onDragOver: event => event.preventDefault(),\n    onDrop: event => {\n      event.preventDefault();\n      const taskId = event.dataTransfer.getData('taskId');\n      updateTaskStatus(taskId, status);\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"list__title\",\n      children: status === 'open' ? 'To Do' : status === 'in-progress' ? 'In Progress' : 'Done'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list__content\",\n      children: displayedTasks.filter(task => task.status === status) // Filter tasks by matching status\n      .map(task => /*#__PURE__*/_jsxDEV(TaskCard, {\n        ...task\n      }, task.taskId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n}\n_s(TaskList, \"a8lPIB0DU7Ht9kFXfmNDnwTDBIA=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["useContext","useEffect","TaskCard","TaskContext","jsxDEV","_jsxDEV","TaskList","status","filteredTasks","setFilteredTasks","_s","tasks","updateTaskStatus","updatedTasks","filter","task","displayedTasks","className","onDragOver","event","preventDefault","onDrop","taskId","dataTransfer","getData","children","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","$RefreshReg$"],"sources":["C:/Users/GRIGS/Desktop/TaskTrail/TaskTrail---REACT/src/Components/TaskList.js"],"sourcesContent":["import '../App.scss';\nimport { useContext, useEffect } from 'react';\nimport TaskCard from './TaskCard.js';\nimport { TaskContext } from '../Context/TaskContext';\n\nfunction TaskList({ status, filteredTasks, setFilteredTasks }) {\n    const { tasks, updateTaskStatus } = useContext(TaskContext);\n\n    useEffect(() => {\n        const updatedTasks = tasks.filter((task) => task.status === status);\n        if (setFilteredTasks) {\n            setFilteredTasks(updatedTasks);\n        }\n    }, [tasks, status, setFilteredTasks]);\n\n    const displayedTasks = filteredTasks || tasks.filter((task) => task.status === status);\n\n    return (\n        <div\n            className=\"task__list\"\n            onDragOver={(event) => event.preventDefault()}\n            onDrop={(event) => {\n                event.preventDefault();\n                const taskId = event.dataTransfer.getData('taskId');\n                updateTaskStatus(taskId, status);\n            }}\n        >\n            <h2 className=\"list__title\">\n                {status === 'open' ? 'To Do' : status === 'in-progress' ? 'In Progress' : 'Done'}\n            </h2>\n            <div className=\"list__content\">\n                {displayedTasks\n                    .filter((task) => task.status === status) // Filter tasks by matching status\n                    .map((task) => (\n                        <TaskCard\n                            key={task.taskId} // Unique key for React rendering\n                            {...task} // Spread all task properties as props\n                        />\n                    ))}\n            </div>\n        </div>\n    );\n}\n\nexport default TaskList;"],"mappings":";;AAAA,OAAO,aAAa;AACpB,SAASA,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7C,OAAOC,QAAQ,MAAM,eAAe;AACpC,SAASC,WAAW,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErD,SAASC,QAAQA,CAAC;EAAEC,MAAM;EAAEC,aAAa;EAAEC;AAAiB,CAAC,EAAE;EAAAC,EAAA;EAC3D,MAAM;IAAEC,KAAK;IAAEC;EAAiB,CAAC,GAAGZ,UAAU,CAACG,WAAW,CAAC;EAE3DF,SAAS,CAAC,MAAM;IACZ,MAAMY,YAAY,GAAGF,KAAK,CAACG,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACR,MAAM,KAAKA,MAAM,CAAC;IACnE,IAAIE,gBAAgB,EAAE;MAClBA,gBAAgB,CAACI,YAAY,CAAC;IAClC;EACJ,CAAC,EAAE,CAACF,KAAK,EAAEJ,MAAM,EAAEE,gBAAgB,CAAC,CAAC;EAErC,MAAMO,cAAc,GAAGR,aAAa,IAAIG,KAAK,CAACG,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACR,MAAM,KAAKA,MAAM,CAAC;EAEtF,oBACIF,OAAA;IACIY,SAAS,EAAC,YAAY;IACtBC,UAAU,EAAGC,KAAK,IAAKA,KAAK,CAACC,cAAc,CAAC,CAAE;IAC9CC,MAAM,EAAGF,KAAK,IAAK;MACfA,KAAK,CAACC,cAAc,CAAC,CAAC;MACtB,MAAME,MAAM,GAAGH,KAAK,CAACI,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;MACnDZ,gBAAgB,CAACU,MAAM,EAAEf,MAAM,CAAC;IACpC,CAAE;IAAAkB,QAAA,gBAEFpB,OAAA;MAAIY,SAAS,EAAC,aAAa;MAAAQ,QAAA,EACtBlB,MAAM,KAAK,MAAM,GAAG,OAAO,GAAGA,MAAM,KAAK,aAAa,GAAG,aAAa,GAAG;IAAM;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChF,CAAC,eACLxB,OAAA;MAAKY,SAAS,EAAC,eAAe;MAAAQ,QAAA,EACzBT,cAAc,CACVF,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACR,MAAM,KAAKA,MAAM,CAAC,CAAC;MAAA,CACzCuB,GAAG,CAAEf,IAAI,iBACNV,OAAA,CAACH,QAAQ;QAAA,GAEDa;MAAI,GADHA,IAAI,CAACO,MAAM;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEnB,CACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACnB,EAAA,CArCQJ,QAAQ;AAAAyB,EAAA,GAARzB,QAAQ;AAuCjB,eAAeA,QAAQ;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}